<?xml version="1.0" encoding="UTF-8"?>
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔， 
	如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug:当此属性设置为true时，将打印出logback内部日志信息， 
	实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds"
	debug="false">
	<!-- 定义参数常量 -->
	<!-- logger.trace("msg" logger.debug... -->
	<property name="log.level" value="debug" />
	<!-- 日志最大的历史 30天 -->
	<property name="log.maxHistory" value="30" />
	<!-- 定义日志文件 输入位置 -->
	<property name="log.filePath" value="/users/songxiaodong/ruankong-project/log" />
	<property name="log.pattern"  value="%d{yyyy-MM-dd HH:mm:ss:SSS}[%thread]%-5level%logger{50}-%msg%n" />
	<property name="log.charset" value="utf-8" />
	<!-- 控制台设置,控制台输出日志 -->
	<appender name="console"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${log.pattern}</pattern>
			<charset>${log.charset}</charset>
		</encoder>
	</appender>
	<!-- trace 级别的日志 -->
	<appender name="traceAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.filePath}/trace.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/trace/trace.%d{yyyy-MM-dd}.log.gz
			</fileNamePattern>
			<!-- 文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>TRACE</level>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<root level="TRACE">
		<!-- 控制台输出 -->
		<appender-ref ref="console" />
		<appender-ref ref="traceAppender" />
	</root>
</configuration>